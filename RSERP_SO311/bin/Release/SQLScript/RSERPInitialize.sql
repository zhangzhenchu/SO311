
--请购单生成依据
if not exists(select 1 from  sysobjects(nolock) where id =object_id('PU_AppVouchs_zhrs_mrp','U') )  
 	begin  
 CREATE TABLE PU_AppVouchs_zhrs_mrp(  
 	ID int NOT NULL,  
 	AutoID int NOT NULL,	  
 		mrpdatetime datetime not null default getdate(),--核算时间	  
 		fQuantity  decimal(28,4) NOT NULL default 0, --请购数量
 	    Now_PurQty   decimal(28,4) NOT NULL default 0, --采购在途
 	    toArrQty  decimal(28,4) NOT NULL default 0, --即将到货
 	    Now_PurArrQty  decimal(28,4) NOT NULL default 0, --到货在检
 	    CurSotckQty  decimal(28,4) NOT NULL default 0, --现存量
 	    useQty decimal(28,4) NOT NULL default 0 --已分配量
 	)  
 CREATE UNIQUE NONCLUSTERED INDEX [idx_PU_AppVouchs_zhrs_mrp] ON PU_AppVouchs_zhrs_mrp ( ID,AutoID ) 
 end 

go

--制造单子件批改
if exists(select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_mom_moallocate_Component') and xtype='V')  
 drop view zhrs_mom_moallocate_Component  

go

CREATE view zhrs_mom_moallocate_Component as   
 select t.modid, m.mocode,t.MDeptCode,m.CreateDate,t.SoCode,  
 t.InvCode as 'finishcode',  
 t.sortseq ,c.invcode,c.ComponentId,c.OpComponentId,t.qty as 'momqty',  
 c.qty as 'needqty',c.TransQty,c.IssQty,c.BaseQtyN,c.Remark from  mom_moallocate c  
 left join mom_orderdetail t on c.modid=t.modid  
 left join mom_order m on m.moid=t.moid  


go

--制造单生成依据
 if not exists(select 1 from  sysobjects(nolock) where id =object_id('mom_orderdetail_zhrs_mrp','U') )  
 	begin  
 	CREATE TABLE mom_orderdetail_zhrs_mrp(  
 	PlanningSortSeq int NOT NULL default 0, --排产序号
 	MoId int NOT NULL,  
 	MoDId int NOT NULL,	  
 	SortSeq int NOT NULL   DEFAULT (0),  
 	PartId int NULL,  
 	mrpdatetime datetime NOT NULL DEFAULT (getdate()),  
 	Qty decimal(28, 4) NOT NULL DEFAULT (0),	--生产订单数量
 	moQty decimal(28, 4) NOT NULL DEFAULT (0),--在制数量	  
 	CurSotckQty decimal(28, 4) NOT NULL DEFAULT ((0)),  
 	useQty decimal(28, 4) NOT NULL DEFAULT ((0))  
 	)   
 CREATE UNIQUE NONCLUSTERED INDEX [idx_mom_orderdetail_zhrs_mrp] ON mom_orderdetail_zhrs_mrp (  MoId,MoDId,SortSeq,PartId ) 
 end  

go

--计算BOM标准成本
if exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_proc_CountBOMCoct') AND Xtype='P')  
 drop procedure [dbo].[zhrs_proc_CountBOMCoct]  

go

  
 CREATE procedure [dbo].[zhrs_proc_CountBOMCoct]  
        @v_tablename nvarchar(255),  
        @v_cInvName nvarchar(100)  
 as   
 --产品标准成本
   
 --BOM标准成本，取代用友自带的
 --以树形结构展开BOM，直观
 --自动取最新版本的BOM成本
   
   
 --田景观-08-08  
 declare @l_str1 varchar(8000)  
   
 set @l_str1='IF EXISTS (SELECT NAME FROM tempdb..SYSOBJECTS (nolock)  WHERE NAME ='''+@v_tablename+''' AND Xtype=''U'')' + CHAR(13) + CHAR(10)  
 set @l_str1= @l_str1 +'DROP Table tempdb..'+@v_tablename  
 exec (@l_str1)  
   
 --ponotype，=采购订单；=销售订单; 3=BOM统计
 --isbottompart,0=母件或中间件；=底层物料
 set @l_str1='create table tempdb..'+@v_tablename+' (rowid int IDENTITY(1,1) NOT NULL, blevel tinyint,  
  state varchar(20) not null default '''',  
  pBomID int not null default 0,  
  cBomID int not null default 0,  
  pinvcode varchar(20),  
  cinvcode varchar(20),  
  ponotype tinyint not null default 0,  
  isbottompart tinyint not null default 0,  
  pono varchar(30) not null default '''',  
  baseqty  decimal(28,4) not null default 0,  
  grandtotalbaseqty  decimal(28,4) not null default 0,  
  lastcost decimal(28,4) not null default 0,  
  last6monthavgcost decimal(28,4) not null default 0  
 )'  
 exec (@l_str1)  
   
   
 set @l_str1='delete tempdb..'+@v_tablename  
 exec (@l_str1)  
 set @l_str1='  
 declare @v_PartId int ' + CHAR(13) + CHAR(10)+'  
 select @v_PartId=PartId from bas_part  where invcode='''+@v_cInvName+''''+  CHAR(13) + CHAR(10)+'  
 insert into tempdb..'+@v_tablename+'(pBomID,cBomID,blevel,pinvcode,cinvcode,baseqty,grandtotalbaseqty)'+  CHAR(13) + CHAR(10)+'  
 select pBomID=0,cBomID=0,blevel=0,pinvcode=''母件'',invcode,baseqty=1,grandtotalbaseqty=1 from bas_part  where invcode='''+@v_cInvName+''''  
  + CHAR(13) + CHAR(10)+'  
 exec zhrs_proc_FindBOM ''tempdb..'+@v_tablename+''',1,@v_PartId,0,1'  
 exec (@l_str1)  
   
   
   
 ---取平均单价
 set @l_str1='update tempdb..'+@v_tablename+' set ponotype=1,  
 pono=m.pono,last6monthavgcost=m.last6monthavgcost from   
 (select cinvcode,pono,last6monthavgcost from zhrs_t_LastPoPrice where ponotype=1 ) m  where tempdb..'+@v_tablename+'.cinvcode=m.cinvcode'  
 exec (@l_str1)  
 ---取最新售价
   
 ---取最新单价
 set @l_str1='update tempdb..'+@v_tablename+' set ponotype=1,lastcost=isnull(m.cost,0) from   
 (select cinvcode,cost=isnull(unitcost*exchangerate,0)  from zhrs_t_LastPoPrice  where ponotype=1 ) m  where tempdb..'+@v_tablename+'.cinvcode=m.cinvcode'  
 exec (@l_str1)  
 ---取最新售价
   
   
 ---统计BOM成本，递归成本算法
 set @l_str1='  
 declare @v_blevel int  
 select  @v_blevel=max(blevel) from tempdb..'+@v_tablename+'  
   
 update tempdb..'+@v_tablename+'  set state=isnull(case when (abs((lastcost-last6monthavgcost)/(case when  last6monthavgcost=0 then 1 else last6monthavgcost end) )>0.3 )   
   then ''成本变动大'' else case when lastcost<=0 then ''物料零成本'' else '''' end end,'''') where isbottompart=1   
   
 while @v_blevel>=0  
 begin  
   update tempdb..'+@v_tablename+' set ponotype=3,state=isnull(m.state,''''),lastcost=m.lastcost,last6monthavgcost=m.last6monthavgcost  
     
  from   
   (select tt.blevel,tt.pBomID,tt.pinvcode,lastcost=sum(tt.lastcost*tt.baseqty),last6monthavgcost=sum(tt.last6monthavgcost*tt.baseqty),  
 state=max(tt.state)  
  from (select DISTINCT blevel,pBomID,cBomID,cinvcode,pinvcode,lastcost,baseqty,last6monthavgcost,state from tempdb..'+@v_tablename+' where blevel=@v_blevel )tt group by tt.blevel,tt.pinvcode,tt.pBomID) m  
   where m.blevel=@v_blevel  
    and tempdb..'+@v_tablename+'.blevel=@v_blevel-1  
    and m.pinvcode=tempdb..'+@v_tablename+'.cinvcode  
 and m.pBomID=tempdb..'+@v_tablename+'.cBomID  
    set @v_blevel=@v_blevel-1  
 end  
   
 update tempdb..'+@v_tablename+' set state=isnull(m.state,'''') from   
 (select state=max(state) from  tempdb..'+@v_tablename+' where blevel>0 ) m   
  where tempdb..'+@v_tablename+'.blevel=0   
 '  
 --print @l_str1  
 exec (@l_str1)  
   
   
 --程序代码结束
   

go

--计算BOM标准成本-展开BOM
if exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_proc_FindBOM') AND Xtype='P')  
 drop procedure zhrs_proc_FindBOM  

go

CREATE procedure [dbo].[zhrs_proc_FindBOM]   
        @v_tablename nvarchar(255),  
        @v_level tinyint,  
        @v_ParentId int,  
         @v_BomID int,  
         @v_GrandTotalBaseqty  decimal(28,4)  
 as   
   
 --BOM标准成本，取代用友自带的
 --以树形结构展开BOM，直观
 --自动取最新版本的BOM成本
   
   
 --展开BOM多阶明细
 --田景观-08-08  
 declare @l_str1 varchar(8000)  
   
 declare  @v_componentid int,@v_componentid_tmp int   
 declare @v_isbottompart tinyint  
 declare  @v_BomID2 int   
 declare @v_level_tmp tinyint  
 declare @v_GrandTotalBaseqty_temp  decimal(28,4)  
 set @v_componentid=-1  
 set @v_componentid_tmp=null  
 set @v_isbottompart=0  
   
   
      
  declare @v_cInvCode nvarchar(20)      
   declare @v_msg nvarchar(200)      
   select @v_cInvCode=InvCode from bas_part (nolock) where partid=@v_ParentId    
   set @v_cInvCode=isnull(@v_cInvCode,'')    
   set @v_msg=@v_cInvCode +'   BOM死循环'  
   if (@v_level>=50)   
   begin   
      raisError(@v_msg, 16, 11);    
      rollback tran;    
   end   
      
 while not (@v_componentid is null )  
 begin   
 set @v_componentid_tmp=null  
 	select top 1 @v_BomID2=d.BomId,@v_componentid_tmp=d.componentid,@v_GrandTotalBaseqty_temp=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*@v_GrandTotalBaseqty from  bom_opcomponent d with (nolock),  
  bom_bom a with (nolock), bom_parent b with (nolock), bas_part c with (nolock)  
 	,bas_part p with (nolock)  
 	   where  a.BomType = 1 and a.BomId = b.BomId   
 	and a.BomId = d.BomId and a.Status=3 and   
 	p.PartId =b.ParentId and   
 	c.PartId =d.componentid and b.ParentId =@v_ParentId  
     and d.componentid>@v_componentid  
 	and a.version in (  
 	select version=max(a.version) from bom_bom a with (nolock),bom_parent b with (nolock)  
 	where  a.BomType = 1 and a.BomId = b.BomId and a.Status=3  and b.ParentId =@v_ParentId)  
     order by  d.componentid  
     set @v_componentid=@v_componentid_tmp  
   
    if not (@v_componentid is null )  
     begin  
   
 	 if exists(select 1 from bom_parent (nolock) where ParentId=@v_componentid )  
 			  set @v_isbottompart=0  
 		   else  
 			  set @v_isbottompart=1  
   
 		set @l_str1='insert into '+ @v_tablename +' (pBomID,cBomID,blevel,isbottompart,pinvcode,cinvcode,baseqty,grandtotalbaseqty)  
 			select '+convert(varchar,@v_BomID)+',d.BomId,'+convert(varchar,@v_level)+','+convert(varchar,@v_isbottompart)+',pinvcode=p.invcode, cinvcode=c.invcode ,  
 		baseqty=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1)),'+convert(varchar,@v_GrandTotalBaseqty_temp)+'  
 		from  bom_opcomponent d with (nolock),  
 		 bom_bom a with (nolock), bom_parent b with (nolock), bas_part c with (nolock)  
 			,bas_part p with (nolock)  
 			   where  a.BomType = 1 and a.BomId = b.BomId   
 			and a.BomId = d.BomId and a.Status=3 and   
 			p.PartId =b.ParentId    
 			and d.componentid='+convert(varchar,@v_componentid)+'  
 			and c.PartId =d.componentid and b.ParentId ='+convert(varchar,@v_ParentId)+'  
   			and a.version in (  
 			select version=max(a.version) from bom_bom a with (nolock),bom_parent b with (nolock)  
 			where  a.BomType = 1 and a.BomId = b.BomId and a.Status=3  and b.ParentId ='+convert(varchar,@v_ParentId)+')'  
   
 		exec (@l_str1)  
       if (@v_isbottompart=0)  
       begin  
 		  set @v_level_tmp=@v_level+1  
 		  exec   zhrs_proc_FindBOM @v_tablename,@v_level_tmp,@v_componentid,@v_BomID2,@v_GrandTotalBaseqty_temp  
       end  
     end  
 end  
 --程序代码结束

go

if exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_proc_ExpandStandardBOM_PR64') AND Xtype='P')  
 drop procedure zhrs_proc_ExpandStandardBOM_PR64  

go


--展标准BOM  
CREATE procedure [dbo].[zhrs_proc_ExpandStandardBOM_PR64]      
         @v_tempTableName   nvarchar(255),   --临时表名     
         @v_OrderDId int , --销售订单标识ID    
         @v_dotype tinyint,--0=产成品或半成品；=采购物料；=MRP    
         @v_level tinyint,--BOM层次 
         @v_ParentId int,--父阶料号ID    
          @v_BomID int,--BOMID    
          @v_GrandTotalBaseqty  decimal(28,4),--累计用量 
          @Keyword nvarchar(2000)  --关键字 
  as     
  --exec zhrs_proc_ExpandStandardBOM_PR64 销售订单标识ID,(0=产成品或半成品；=采购物料=MRP),BOM层次(默认),父阶料号ID,BOMID(默认),累计用量(默认为订单数量),关键字(过虑条件，默认为空)    
  --展开BOM多阶明细 
      
      
  declare @l_str1 varchar(8000)    
      
  declare  @v_componentid int,@v_componentid_tmp int     
  declare @v_isbottompart tinyint    
  declare  @v_BomID2 int     
  declare @v_level_tmp tinyint    
  declare @v_GrandTotalBaseqty_temp  decimal(28,4)    
  set @v_componentid=-1    
  set @v_componentid_tmp=null    
  set @v_isbottompart=0    
      
      
  declare @v_cInvCode nvarchar(20)      
   declare @v_msg nvarchar(200)      
   select @v_cInvCode=InvCode from bas_part (nolock) where partid=@v_ParentId    
   set @v_cInvCode=isnull(@v_cInvCode,'')    
   set @v_msg=@v_cInvCode +'   BOM死循环'  
   if (@v_level>=50)   
   begin   
      raisError(@v_msg, 16, 11);    
      rollback tran;    
   end   
      
  set @l_str1='insert into '+ @v_tempTableName +'(OrderDId,blevel,cInvCode,Qty)'+    
  'select  '+  convert(varchar,@v_OrderDId) +','+convert(varchar,@v_level)+',c.invcode ,convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*'+convert(varchar,@v_GrandTotalBaseqty)+    
  ' from  bom_opcomponent d with (nolock),    
   bom_bom a with (nolock), bom_parent b with (nolock), bas_part c with (nolock)    
  	,bas_part p with (nolock),bom_opcomponentopt wip with (nolock)    
  	   where  a.BomType in (1,2) and a.BomId = b.BomId     
  	and a.BomId = d.BomId and a.Status=3 and     
  	p.PartId =b.ParentId  and d.OptionsId = wip.OptionsId and wip.WIPType<>4  '  
 	-----------@v_dotype=3 MRP begin-------------   
 	  if (@v_dotype<>3)    
 	  begin    
 		   set @l_str1=@l_str1+ ' and exists (select 1 from  inventory (nolock) where'    
 		   if (@v_dotype=0)          
 			  set @l_str1=@l_str1+ ' inventory.bSelf=1 '       --自制（成品或半成品）          
 		   else     
 			  set @l_str1=@l_str1+ ' inventory.bPurchase=1 ' --采购 
 		             
 		   set @l_str1=@l_str1+  'and inventory.cinvcode=c.invcode ) '    
 		     
 		   if (@v_dotype=0)          
 			  set @l_str1=@l_str1+ '    and d.componentid in (select ParentId from bom_parent (nolock))'  --自制件前要有子件的才能生产 
 	 end   
 	-----------@v_dotype=3 MRP end-------------  
  set @l_str1=@l_str1+ ' and c.PartId =d.componentid and b.ParentId ='+convert(varchar,@v_ParentId)+'  ' + @Keyword +' '+'    
  	and a.version in (    
  	select version=max(a.version) from bom_bom a with (nolock),bom_parent b with (nolock)    
  	where  a.BomType  in (1,2) and a.BomId = b.BomId and a.Status=3  and b.ParentId ='+convert(varchar,@v_ParentId)+')'    
      
  exec (@l_str1)    
      
  while not (@v_componentid is null )    
  begin     
  set @v_componentid_tmp=null    
  	select top 1 @v_BomID2=d.BomId,@v_componentid_tmp=d.componentid,@v_GrandTotalBaseqty_temp=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*@v_GrandTotalBaseqty from  bom_opcomponent d with (nolock),    
   bom_bom a with (nolock), bom_parent b with (nolock), bas_part c with (nolock)    
  	,bas_part p with (nolock)    
  	   where  a.BomType  in (1,2) and a.BomId = b.BomId     
  	and a.BomId = d.BomId and a.Status=3 and     
  	p.PartId =b.ParentId and     
  	c.PartId =d.componentid and b.ParentId =@v_ParentId    
      and d.componentid>@v_componentid    
      and exists (select 1 from  inventory (nolock) where inventory.bSelf=1 and inventory.cinvcode=c.invcode )--只展开允许自制的BOM    
  	and a.version in (    
  	select version=max(a.version) from bom_bom a with (nolock),bom_parent b with (nolock)    
  	where  a.BomType  in (1,2) and a.BomId = b.BomId and a.Status=3  and b.ParentId =@v_ParentId)    
      order by  d.componentid    
      
      
      set @v_componentid=@v_componentid_tmp    
      
     if not (@v_componentid is null )    
      begin    
      
  	 if exists(select 1 from bom_parent (nolock) where ParentId=@v_componentid )    
  			  set @v_isbottompart=0    
  		   else    
  			  set @v_isbottompart=1    
        if (@v_isbottompart=0)    
        begin    
  		  set @v_level_tmp=@v_level+1    
  		  exec   zhrs_proc_ExpandStandardBOM_PR64  @v_tempTableName,@v_OrderDId,@v_dotype,@v_level_tmp,@v_componentid,@v_BomID2,@v_GrandTotalBaseqty_temp,@Keyword              
        end    
      end    
  end    
  --展标准BOM 程序代码结束 
   

go


if exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_proc_ExpandOrderBOM_PR64') AND Xtype='P')  
 drop procedure zhrs_proc_ExpandOrderBOM_PR64  

go


 --展开订单BOM      
 CREATE procedure [dbo].[zhrs_proc_ExpandOrderBOM_PR64]      
         @v_tempTableName   nvarchar(255),   -- 临时表名 
         @v_OrderDId int ,--订单表体唯一标识ID    
         @v_dotype tinyint,--0=产成品或半成品；=采购物料；=MRP    
         @v_level tinyint,--BOM层次 
         @v_ParentId int,--父阶料号ID    
          @v_BomID int,--BOMID    
          @v_GrandTotalBaseqty  decimal(28,4),--累计用量 
          @Keyword nvarchar(2000)  --关键字 
  as     
  --exec zhrs_proc_ExpandOrderBOM_PR64 临时表名,销售订单标识ID,(0=产成品或半成品；=采购物料；=MRP),BOM层次(默认),父阶料号ID,BOMID(默认),累计用量(默认为订单数量),关键字(过虑条件，默认为空)    
  --展开订单BOM多阶明细 
      
  declare @l_str1 varchar(8000)    
      
  declare  @v_componentid int,@v_componentid_tmp int     
  declare @v_isbottompart tinyint    
  declare  @v_BomID2 int     
  declare @v_level_tmp tinyint    
  declare @v_GrandTotalBaseqty_temp  decimal(28,4)    
  set @v_componentid=-1    
  set @v_componentid_tmp=null    
  set @v_isbottompart=0    
      
  declare @v_cInvCode nvarchar(20)      
   declare @v_msg nvarchar(200)      
   select @v_cInvCode=InvCode from bas_part (nolock) where partid=@v_ParentId    
   set @v_cInvCode=isnull(@v_cInvCode,'')    
   set @v_msg=@v_cInvCode +'   BOM死循环'  
   if (@v_level>=50)   
   begin   
      raisError(@v_msg, 16, 11);    
      rollback tran;    
   end   
      
  set @l_str1='insert into '+ @v_tempTableName +'(OrderDId,blevel,cInvCode,Qty)'+    
  'select '+ convert(varchar,@v_OrderDId) +','+convert(varchar,@v_level)+',c.invcode ,convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*'+convert(varchar,@v_GrandTotalBaseqty)+    
  ' from  bom_opcomponent d with (nolock),    
   bom_bom a with (nolock), bom_parent b with (nolock), bas_part c with (nolock)    
  	,bas_part p with (nolock),bom_opcomponentopt wip with (nolock),bom_orderbom od  (nolock)     
  	   where  a.BomType = 3 and a.BomId = b.BomId     
  	and a.BomId = d.BomId and a.Status=3  and a.BomId=od.BomId and     
      od.OrderType=1 and    
      od.OrderDId = '+ convert(varchar,@v_OrderDId) +'and    
  	p.PartId =b.ParentId  and d.OptionsId = wip.OptionsId and wip.WIPType<>4  '  
  	-----------@v_dotype=3 MRP begin-------------   
  if (@v_dotype<>3)    
  begin    
    set @l_str1=@l_str1+ 'and exists (select 1 from  inventory (nolock) where'    
    if (@v_dotype=0)          
 	  set @l_str1=@l_str1+ ' inventory.bSelf=1 '       --自制（成品或半成品） 
            
    else     
 	  set @l_str1=@l_str1+ ' inventory.bPurchase=1 ' --采购 
              
    set @l_str1=@l_str1+  'and inventory.cinvcode=c.invcode ) '    
      
    if (@v_dotype=0)          
 	  set @l_str1=@l_str1+ '    and d.componentid in (select ParentId from bom_parent (nolock))'  --自制件前要有子件的才能生产 
  end   
   -----------@v_dotype=3 MRP end-------------  
  set @l_str1=@l_str1+ ' and c.PartId =d.componentid and b.ParentId ='+convert(varchar,@v_ParentId)+' ' + @Keyword +' '    
      
  exec (@l_str1)    
      
  while not (@v_componentid is null )    
  begin     
  set @v_componentid_tmp=null    
  	select top 1 @v_BomID2=d.BomId,@v_componentid_tmp=d.componentid,@v_GrandTotalBaseqty_temp=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*@v_GrandTotalBaseqty from  bom_opcomponent d with (nolock),    
   bom_bom a with (nolock), bom_parent b with (nolock), bas_part c with (nolock) ,bom_orderbom od  (nolock)    
  	,bas_part p with (nolock)    
  	   where  a.BomType = 3 and a.BomId = b.BomId     
  	and a.BomId = d.BomId and a.Status=3 and     
  	p.PartId =b.ParentId and a.BomId=od.BomId and       
      od.OrderType=1 and    
      od.OrderDId = @v_OrderDId and    
  	c.PartId =d.componentid and b.ParentId =@v_ParentId    
      and d.componentid>@v_componentid    
      and exists (select 1 from  inventory (nolock) where inventory.bSelf=1 and inventory.cinvcode=c.invcode )--只展开允许自制的BOM    
  	    
      order by  d.componentid    
      
      
      set @v_componentid=@v_componentid_tmp    
      
     if not (@v_componentid is null )    
      begin    
      
  	 if exists(select 1 from bom_parent (nolock) where ParentId=@v_componentid )    
  			  set @v_isbottompart=0    
  		   else    
  			  set @v_isbottompart=1    
        if (@v_isbottompart=0)    
        begin    
  		  set @v_level_tmp=@v_level+1    
  		  exec   zhrs_proc_ExpandOrderBOM_PR64  @v_tempTableName,@v_OrderDId,@v_dotype,@v_level_tmp,@v_componentid,@v_BomID2,@v_GrandTotalBaseqty_temp,@Keyword    
        end    
      end    
  end    
  --展开订单BOM 程序代码结束 
   

go


if exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_proc_ExpandStandardBOM_MRP2') AND Xtype='P')  
 drop procedure zhrs_proc_ExpandStandardBOM_MRP2  

go

--MRP2 展标准BOM    
 CREATE procedure [dbo].[zhrs_proc_ExpandStandardBOM_MRP2]        
          @v_tempTableName   nvarchar(255),   --临时表名      
         @v_BOOT_PartId int , --根产品ID         
          @v_level tinyint,--BOM层次  
          @v_ParentId int,--父阶料号ID      
           @v_BomID int,--BOMID      
           @v_GrandTotalBaseqty  decimal(28,4)--累计用量  
            
   as       
   --exec zhrs_proc_ExpandStandardBOM_MRP2 销售订单标识ID,BOM层次(默认),父阶料号ID,BOMID(默认),累计用量(默认为订单数量),关键字(过虑条件，默认为空)      
   --展开BOM多阶明细  
         
         
   declare @l_str1 varchar(8000)      
         
   declare  @v_componentid int,@v_componentid_tmp int       
   declare  @v_BomID2 int       
   declare @v_level_tmp tinyint      
   declare @v_GrandTotalBaseqty_temp  decimal(28,4)      
   set @v_componentid=-1      
   set @v_componentid_tmp=null      
         
   declare @v_cInvCode nvarchar(20)        
   declare @v_msg nvarchar(200)        
   select @v_cInvCode=InvCode from #bas_part (nolock) where partid=@v_ParentId      
   set @v_cInvCode=isnull(@v_cInvCode,'')      
   set @v_msg=@v_cInvCode +'BOM死循环'    
   if (@v_level>=50)     
    begin     
       raisError(@v_msg, 16, 11);      
       rollback tran;      
    end     
    
   set @l_str1='insert into '+ @v_tempTableName +'(ParentId,pPartId,blevel,PartId,UnitUseQty,Qty)'+        
    'select  '+  convert(varchar, @v_ParentId) +','+  convert(varchar,@v_BOOT_PartId) +','+convert(varchar,@v_level)+',d.componentid ,
     UnitUseQty=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1)),
     Qty=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*'+convert(varchar,@v_GrandTotalBaseqty)+        
    ' from  #bom_opcomponent d with (nolock),        
     #bom_bom a with (nolock), #bom_parent b with (nolock)        
    	,#bom_opcomponentopt wip with (nolock)        
    	   where  a.BomType in (1,2) and a.BomId = b.BomId and a.VersionEffDate <= left(convert(varchar,getdate(),20),10) and a.VersionEndDate >left(convert(varchar,getdate(),20),10)     
    	and a.BomId = d.BomId and a.Status=3 and d.OptionsId = wip.OptionsId and wip.WIPType<>4  '      
    set @l_str1=@l_str1+ '  and b.ParentId ='+convert(varchar,@v_ParentId)+'        
    	and exists ( select 1 from   
    	(select version=max(a1.version) from bom_bom a1 with (nolock),bom_parent b1 with (nolock)        
    	where  a1.BomType  in (1,2) and a1.BomId = b1.BomId and a1.Status=3  and b1.ParentId ='+convert(varchar,@v_ParentId)+') v where a.version=v.version)  '    
   
--   print @l_str1 
    exec (@l_str1)        
         
         
   while not (@v_componentid is null )      
   begin       
   set @v_componentid_tmp=null     
    
   
   
  	select top 1 @v_BomID2=d.BomId,@v_componentid_tmp=d.componentid,@v_GrandTotalBaseqty_temp=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*@v_GrandTotalBaseqty from  #bom_opcomponent d with (nolock),      
    #bom_bom a with (nolock), #bom_parent b with (nolock)  
   	   where  a.BomType  in (1,2) and a.BomId = b.BomId       
   	and a.BomId = d.BomId and a.Status=3 and  b.ParentId =@v_ParentId      
       and d.componentid>@v_componentid and a.VersionEffDate <= left(convert(varchar,getdate(),20),10) and a.VersionEndDate >left(convert(varchar,getdate(),20),10)  and exists ( select 1 from 
   	(select max(a1.version) as 'version' from bom_bom a1 with (nolock),bom_parent b1 with (nolock)      
   	where  a1.BomType  in (1,2) and a1.BomId = b1.BomId and a1.Status=3  and b1.ParentId =@v_ParentId) v where a.version=v.version)    
     and exists (select 1 from #bom_parent pr (nolock) where pr.ParentId=d.componentid )    
       order by  d.componentid      
               
      set @v_componentid=@v_componentid_tmp      
         
      if not (@v_componentid is null )      
       begin      
         set @v_level_tmp=@v_level+1      
   	    exec   zhrs_proc_ExpandStandardBOM_MRP2  @v_tempTableName,@v_BOOT_PartId,@v_level_tmp,@v_componentid,@v_BomID2,@v_GrandTotalBaseqty_temp   
       end      
   end      
   --MRP2 展标准BOM 程序代码结束  
      

go

if exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_proc_ExpandOrderBOM_MRP2') AND Xtype='P')  
 drop procedure zhrs_proc_ExpandOrderBOM_MRP2  

go


 --MRP2 展开订单BOM          
   CREATE procedure [dbo].[zhrs_proc_ExpandOrderBOM_MRP2]          
           @v_tempTableName   nvarchar(255),   -- 临时表名   
           @v_OrderDId int ,--订单表体唯一标识ID   
           @v_level tinyint,--BOM层次   
           @v_ParentId int,--父阶料号ID        
            @v_BomID int,--BOMID        
            @v_GrandTotalBaseqty  decimal(28,4)--累计用量   
              
    as         
    --exec zhrs_proc_ExpandOrderBOM_MRP2 临时表名,销售订单标识ID,BOM层次(默认),父阶料号ID,BOMID(默认),累计用量(默认为订单数量),关键字(过虑条件，默认为空)        
    --展开订单BOM多阶明细   
    declare @v_tempTableNameStandardBOM varchar(128)   
    declare @l_str1 varchar(8000)       
            
    declare  @v_componentid int,@v_componentid_tmp int   
    declare @v_isbottompart tinyint        
    declare  @v_BomID2 int  
    declare @v_level_tmp tinyint        
    declare @v_GrandTotalBaseqty_temp  decimal(28,4) 
    set @v_componentid=-1        
    set @v_componentid_tmp=null  
    set @v_isbottompart=0  
    set @v_tempTableNameStandardBOM= @v_tempTableName+'StandardBOM'        
         
   declare @v_cInvCode nvarchar(20)        
    declare @v_msg nvarchar(200)        
    select @v_cInvCode=InvCode from #bas_part (nolock) where partid=@v_ParentId      
    set @v_cInvCode=isnull(@v_cInvCode,'')      
    set @v_msg=@v_cInvCode +'   BOM死循环'    
    if (@v_level>=50)     
    begin     
       raisError(@v_msg, 16, 11);      
       rollback tran;      
    end     
         
    set @l_str1='insert into '+ @v_tempTableName +'(ParentId,OrderDId,blevel,PartId,UnitUseQty,Qty,remark)'+        
    'select '+  convert(varchar, @v_ParentId) +','+ convert(varchar,@v_OrderDId) +','+convert(varchar,@v_level)+',d.componentid ,
     UnitUseQty=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1)),
     Qty=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*'+convert(varchar,@v_GrandTotalBaseqty)+        
    ',isnull(d.Define29,'''') from  #bom_opcomponent d with (nolock),        
     #bom_bom a with (nolock), #bom_parent b with (nolock),#bom_opcomponentopt wip with (nolock),#bom_orderbom od  (nolock)         
    	   where  a.BomType = 3 and a.BomId = b.BomId         
    	and a.BomId = d.BomId and a.Status=3  and a.BomId=od.BomId and         
        od.OrderType=1 and        
        od.OrderDId = '+ convert(varchar,@v_OrderDId) +'   
     and d.OptionsId = wip.OptionsId and wip.WIPType<>4  '   
    set @l_str1=@l_str1+ '  and b.ParentId ='+convert(varchar,@v_ParentId)      
            
    exec (@l_str1) 
   
            
    while not (@v_componentid is null )        
    begin         
    set @v_componentid_tmp=null        
    	select top 1 @v_BomID2=d.BomId,@v_componentid_tmp=d.componentid,@v_GrandTotalBaseqty_temp=convert(decimal(28,4), d.BaseQtyN/isnull(d.BaseQtyD,1))*@v_GrandTotalBaseqty from  #bom_opcomponent d with (nolock),        
     #bom_bom a with (nolock), #bom_parent b with (nolock),#bom_orderbom od  (nolock)    
    	   where  a.BomType = 3 and a.BomId = b.BomId 
    	and a.BomId = d.BomId and a.Status=3 and  a.BomId=od.BomId and           
        od.OrderType=1 and        
        od.OrderDId = @v_OrderDId and b.ParentId =@v_ParentId        
        and d.componentid>@v_componentid  and exists (select 1 from #bom_parent pr (nolock) where pr.ParentId=d.componentid )       
         order by  d.componentid    
            
        set @v_componentid=@v_componentid_tmp        
            
       if not (@v_componentid is null )        
        begin   
    		   set @v_level_tmp=@v_level+1        
            if exists (select 1 from #bom_bom a,#bom_orderbom od ,#bom_parent b with (nolock)  where a.bomtype=3  and a.BomId = b.BomId and  a.BomId = od.BomId and     
                             b.ParentId =@v_componentid  and od.OrderDId =@v_OrderDId)    
            begin     
            --是否有订单？如果有，则继续展开订单BOM；若没有订单BOM，则展开标准BOM     
    		      exec   zhrs_proc_ExpandOrderBOM_MRP2  @v_tempTableName,@v_OrderDId,@v_level_tmp,@v_componentid,@v_BomID2,@v_GrandTotalBaseqty_temp      
            end    
            else    
            begin    
               set @v_BomID2=null    
               select @v_BomID2=a.bomid from #bom_bom a,#bom_parent b where a.BomId = b.BomId and     
                     a.VersionEffDate <= left(convert(varchar,getdate(),20),10) and a.VersionEndDate >left(convert(varchar,getdate(),20),10)  and     
                     b.ParentId =@v_componentid  and a.bomtype = 1         
               if not (@v_BomID2 is null )        
               begin        
            --没有订单BOM，则检查标准BOM，如果有标准BOM，则展开标准BOM     
                   set @l_str1=' if not exists(select 1 from  '+@v_tempTableNameStandardBOM+' where  pPartID='+convert(varchar,@v_componentid)+')' +char(13)+char(10)  
                   set @l_str1= @l_str1+ '   exec   zhrs_proc_ExpandStandardBOM_MRP2 '''+@v_tempTableNameStandardBOM+''','+convert(varchar,@v_componentid)+','+convert(varchar,@v_level_tmp)+','+convert(varchar,@v_componentid)+','+convert(varchar,@v_BomID2)+','+convert(varchar,@v_GrandTotalBaseqty_temp) +char(13)+char(10)  
                         
                   set @l_str1= @l_str1+ 'insert into ' + @v_tempTableName + '(blevel,OrderDId,ParentId,PartId,UnitUseQty,Qty)'  +char(13)+char(10)  
                   set @l_str1= @l_str1+ 'select blevel,OrderDId='+ convert(varchar,@v_OrderDId) +',ParentId,PartId,UnitUseQty,Qty=UnitUseQty*'+ convert(varchar,@v_GrandTotalBaseqty_temp) +' from  ' +  @v_tempTableNameStandardBOM + ' where pPartID='+convert(varchar,@v_componentid)  +char(13)+char(10)  
                   exec (@l_str1)   
               end      
            end    
            
       end        
    end        
    --MRP2 展开订单BOM 程序代码结束   

go


--高级排产-用户自定义数据
 if not exists(select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_mom_orderdetail_userDefine') AND Xtype='U')  
 begin  
   create table zhrs_t_mom_orderdetail_userDefine(  
   ReProduce bit not null default 0, --是否调库存（重新生产）
   Priority  int null,--优先级
   ViewSort int not null default 0,--显示排序
   MoId int not null ,--制造单表头ID  
   ModId int not null,--制造单体头ID  
   RowColor varchar(1500) not null default 'White')--显示颜色
   CREATE UNIQUE NONCLUSTERED INDEX [idx_zhrs_t_mom_orderdetail_userDefine] ON zhrs_t_mom_orderdetail_userDefine (   
   MoId,ModId )  
 end  
 else  
 delete zhrs_t_mom_orderdetail_userDefine where not exists (select 1 from mom_orderdetail a(nolock) where a.MoID=zhrs_t_mom_orderdetail_userDefine.MoID and a.ModId=zhrs_t_mom_orderdetail_userDefine.ModId)  
   
   
go

--MRP日志单头
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_MRP_Log') AND Xtype='U')   
   begin    
 create table zhrs_t_MRP_Log(cUser_Id nvarchar(20) not null,   
 PlanCode varchar(20) not null,   
 mDate datetime not null default getdate(),    
 CurSotckQtySource tinyint not null default 1,--初始库存：=无，=现存量；=安全库存；=临时库存  
 LastcUser_Id nvarchar(20)  null,   
 LastDateTime datetime  null ,   
 mID int not null  PRIMARY KEY)  
   end   
   
   
go


 --MRP日志明细
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_MRP_LogDetail') AND Xtype='U')   
   begin    
  create table zhrs_t_MRP_LogDetail(  
  mID int not null,  --表头ID  
  cInvCode nvarchar(20) not null,--物料编码
  Prod_cInvCode nvarchar(20) not null,--产品编码（已分配量）
  DocTypeNo tinyint not null,--需求与供应类型ID  
 --1=请购单；=采购订单；=采购到货单；=现存量；
 --5=生产订单(在制)；=销售订单（需求）；=生产订单（需求）；
 --8=替代料；=委外订单（在制）；=委外订单（需求）；=MRP毛需求（需求）；=MRP需求调整（需求）；=备料（预测订单）
  DocType nvarchar(300) not null,--需求与供应类型说明
  cCode nvarchar(120) null,--单号
  cpersonname nvarchar(40) null,--制单人
  SourceCode nvarchar(120)  null,--源单号
  dDate datetime null,--制单日期
  Qty decimal(28,4)not null default 0,  
  UsebleAltm bit not null default 0 --1=有替代料可用
 )  
 --NetDemand=moQty+OsQty+PurQty+PurArrQty+CurSotckQty+AltmQty-useQty-OrderDemand  
   
 CREATE NONCLUSTERED INDEX idx_zhrs_t_MRP_LogDetail ON zhrs_t_MRP_LogDetail   
 (  
 	mID,cInvCode  
 )  
   
 end  
   
   
go

--MRP结果（日志合计）
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_MRP_LogTotal') AND Xtype='U')   
   begin    
 create table  zhrs_t_MRP_LogTotal(  
  mID int not null ,  --表头ID  
  cInvCode_org nvarchar(20) not null default '',--原物料编码（用于用户替代料之后，记录原订单需求的物料）
  cInvCode nvarchar(20) not null,--物料编码
  moQty decimal(28,4)not null default 0,--在制数量（供）
  OsQty decimal(28,4)not null default 0,--委外数量（供）
  PurQty decimal(28,4)not null default 0,--采（请）购在途（供）
  PurArrQty decimal(28,4)not null default 0,--到货在检（供）
  CurSotckQty decimal(28,4)not null default 0,--现存量（供）
  IncreaseQty decimal(28,4)not null default 0,--MRP需求调整（需）
  AltmQty decimal(28,4)not null default 0,--替代料库存（供）
  UsebleAltmQty decimal(28,4)not null default 0,--可使用替代料的数量(供）：比如：订单需求，其中有是可以用替代料来替代的
  useQty decimal(28,4)not null default 0,--已分醒量（需）
  OrderDemandQty decimal(28,4)not null default 0,--毛需求（订单需求）、（按订单和BOM展出来的需求）（需）
  NetDemandQty decimal(28,4)not null default 0,--净需求（需）：生成新请购单和制造的依据
  NetDemandQty_org decimal(28,4)not null default 0,--原净需求（需）：未考虑最小包装量、未考虑切除尾数的MRP需求
  NetDemandDoQty decimal(28,4)not null default 0,--净需求执行数（MRP转生产或请购或委外的数量）
  remark nvarchar(255) not null default ''  
 )  
   
 CREATE UNIQUE NONCLUSTERED INDEX idx_zhrs_t_MRP_LogTotal ON zhrs_t_MRP_LogTotal   
 (  
 	mID,cInvCode  
 )  
 CREATE NONCLUSTERED INDEX idx_zhrs_t_MRP_LogTotal_MID ON zhrs_t_MRP_LogTotal   
 (  
 	mID  
 )  
   
 end  

go

--MRP日志辅助表
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_MRP_LogDetail_sub') AND Xtype='U')  
  begin  
 create  table zhrs_t_MRP_LogDetail_sub(  
 RID int IDENTITY(1,1) NOT NULL,  
 mID int null,  
 isReMRP bit not null default 0,  
 OrderDId int null,  
 pcInvCode nvarchar(20) not null default '',--物料编码(母件)  
 cInvCode nvarchar(20) not null,  
 Qty decimal(28,4) not null default 0, --毛需求
 NetDemandDoQty decimal(28,4)  null default 0,  
 NetDemandQty decimal(28,4) not null default 0,remark nvarchar(255) not null default '')  --净需求
 CREATE  INDEX [idx_zhrs_t_MRP_LogDetail_sub] ON zhrs_t_MRP_LogDetail_sub (   
 mID,cInvCode )  
 end  

go

--替代料表
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_Inventory_Alternative') AND Xtype='U')  
  begin  
 CREATE TABLE [dbo].[zhrs_t_Inventory_Alternative](  
 	[cInvCode] [nvarchar](20) COLLATE Chinese_PRC_CI_AS NOT NULL,	  
     Alternative bit not null default 0   
 ) ON [PRIMARY]  
   
 CREATE UNIQUE NONCLUSTERED INDEX [idx_zhrs_t_Inventory_Alternative] ON [dbo].[zhrs_t_Inventory_Alternative]   
 (  
 	[cInvCode] ASC  
 )  
 end  


go

--MRP调整表
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_MRP_DemandIncrease') AND Xtype='U')  
  begin  
create table zhrs_t_MRP_DemandIncrease(  
 mID int not null,  
 PartId int not null,  
 cInvCode nvarchar(20) not null,  
 IncreaseQty decimal(28,4) not null default 0, 
 LastcUser_Id nvarchar(20) not null , 
 LastDateTime datetime not null default getdate())  
   
   
 CREATE UNIQUE NONCLUSTERED INDEX [idx_zhrs_t_MRP_DemandIncrease] ON [dbo].[zhrs_t_MRP_DemandIncrease]   
 (  
 	mID,PartId  
 )  
 end  


go

--MRP临时库存（用于实施MRP过渡期）
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_MRP_CurrentStock') AND Xtype='U')  
  begin  
CREATE TABLE zhrs_t_MRP_CurrentStock(  
 	cWhCode nvarchar(10)  NOT NULL, --仓库代码
 	cInvCode nvarchar(20)  NOT NULL,--物料编码
 	Qty decimal(28,4) not NULL default 0, --现存量
  cmtInQty decimal(28,4)  not NULL default 0, --本期累计入库数
 	cmtOutQty decimal(28,4) not NULL default 0	--本期累计出库数
 )   
   
   
 CREATE UNIQUE NONCLUSTERED INDEX [idx_zhrs_t_MRP_CurrentStock] ON [dbo].[zhrs_t_MRP_CurrentStock]   
 (  
 	cWhCode,cInvCode  
 )  
 end  

go

--手工销售订单生成制造单需求时，记录需求的明细
 if not exists (select 1 from sysobjects (nolock) where upper(name)=upper('zhrs_t_RSERP_PR64_LogDetail') AND Xtype='U')  
  begin  
 create  table zhrs_t_RSERP_PR64_LogDetail(  
 RID int IDENTITY(1,1) NOT NULL,  
 mID int null,  
 OrderDId int null,  
 cInvCode nvarchar(20) not null,  
 Qty decimal(28,4) not null default 0)  
 CREATE  INDEX [idx_zhrs_t_RSERP_PR64_LogDetail] ON zhrs_t_RSERP_PR64_LogDetail (   
 mID )  
 end  

go

